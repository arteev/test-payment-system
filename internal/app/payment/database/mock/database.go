// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/payment/database/database.go

// Package mockDatabase is a generated GoMock package.
package mockDatabase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	model "test-payment-system/internal/app/payment/database/model"
	time "time"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// NewWallet mocks base method
func (m *MockDatabase) NewWallet(ctx context.Context, name string) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWallet", ctx, name)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWallet indicates an expected call of NewWallet
func (mr *MockDatabaseMockRecorder) NewWallet(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWallet", reflect.TypeOf((*MockDatabase)(nil).NewWallet), ctx, name)
}

// GetWallet mocks base method
func (m *MockDatabase) GetWallet(ctx context.Context, id uint) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", ctx, id)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet
func (mr *MockDatabaseMockRecorder) GetWallet(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockDatabase)(nil).GetWallet), ctx, id)
}

// Deposit mocks base method
func (m *MockDatabase) Deposit(ctx context.Context, walletID uint, amount float64) (*model.WalletDeposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, walletID, amount)
	ret0, _ := ret[0].(*model.WalletDeposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit
func (mr *MockDatabaseMockRecorder) Deposit(ctx, walletID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockDatabase)(nil).Deposit), ctx, walletID, amount)
}

// Transfer mocks base method
func (m *MockDatabase) Transfer(ctx context.Context, walletFrom, walletTo uint, amount float64) (*model.WalletTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, walletFrom, walletTo, amount)
	ret0, _ := ret[0].(*model.WalletTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockDatabaseMockRecorder) Transfer(ctx, walletFrom, walletTo, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockDatabase)(nil).Transfer), ctx, walletFrom, walletTo, amount)
}

// OperationWallet mocks base method
func (m *MockDatabase) OperationWallet(ctx context.Context, walletID uint, operSign *model.OperationSign, timeFrom, timeTo time.Time) ([]*model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationWallet", ctx, walletID, operSign, timeFrom, timeTo)
	ret0, _ := ret[0].([]*model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationWallet indicates an expected call of OperationWallet
func (mr *MockDatabaseMockRecorder) OperationWallet(ctx, walletID, operSign, timeFrom, timeTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationWallet", reflect.TypeOf((*MockDatabase)(nil).OperationWallet), ctx, walletID, operSign, timeFrom, timeTo)
}
